x-airflow-common:
  &airflow-common
  build: ./airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW_CONN_MINIO: 's3://minioadmin:minioadmin@minio:9000?endpoint_url=http%3A%2F%2Fminio%3A9000'
    AIRFLOW_CONN_POSTGRES: 'postgresql+psycopg2://airflow:airflow@postgres:5432/postgres'
    AIRFLOW_CONN_SPARK: 'spark://spark%3A%2F%2Fspark-master:7077//?__extra__=%7B%7D'
    PYTHONPATH: /opt/airflow
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR}/handlers:/opt/airflow/handlers
    - ${AIRFLOW_PROJ_DIR}/spark-apps:/opt/airflow/spark-apps
    - ${AIRFLOW_PROJ_DIR}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR}/temp:/opt/airflow/temp
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

x-spark-common:
  &spark-common
  build: ${SPARK_PROJ_DIR}
  environment:
    SPARK_CONF_DIR: /opt/spark/conf
    SPARK_LOG_DIR: /opt/spark/logs
  volumes:
    - ${SPARK_PROJ_DIR}/logs:/opt/spark/logs
    - ${SPARK_PROJ_DIR}/config/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf:ro
    - ${SPARK_PROJ_DIR}/apps:/opt/spark/apps
    - ${HIVE_PROJ_DIR}/config/hive-site.xml:/opt/spark/conf/hive-site.xml:ro
    - spark-artifacts:/artifacts

services:
  superset:
    image: apache/superset:5.0.0
    environment:
      SUPERSET_SECRET_KEY: dev_secret_key
      ADMIN_USERNAME: supersetadmin
      ADMIN_FIRST_NAME: Superset
      ADMIN_LAST_NAME: Admin
      ADMIN_EMAIL: admin@example.com
      ADMIN_PASSWORD: supersetadmin
      HIVE_URI: hive://superset@spark-thrift:10001/default?auth=NOSASL&transport_mode=http&http_path=cliservice
    user: root
    volumes:
      - ${SUPERSET_PROJ_DIR}/home:/app/superset_home
      - ${SUPERSET_PROJ_DIR}/seed:/app/seed
      - ${SUPERSET_PROJ_DIR}/docker:/app/docker
    ports:
      - "8088:8088"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e

        if [ -f "/app/docker/requirements.txt" ]; then
          echo "Installing local overrides"
          if command -v uv > /dev/null 2>&1; then
            uv pip install --no-cache-dir -r "/app/docker/requirements.txt"
          else
            pip install --no-cache-dir -r "/app/docker/requirements.txt"
          fi
        else
          echo "Skipping local overrides"
        fi

        DB_PATH="/app/superset_home/superset.db"

        if [ ! -f "$${DB_PATH}" ]; then
          echo "No existing metadata DB found. Seeding fresh Superset SQLite database..."
          superset db upgrade

          # Create admin user only once
          if ! superset fab list-users | grep -q "$${ADMIN_USERNAME}"; then
            echo "Creating admin user..."
            superset fab create-admin \
              --username "$${ADMIN_USERNAME}" \
              --firstname "$${ADMIN_FIRST_NAME}" \
              --lastname "$${ADMIN_LAST_NAME}" \
              --email "$${ADMIN_EMAIL}" \
              --password "$${ADMIN_PASSWORD}"
          fi

          superset init

          # optional: import dashboards if provided
          if [ -f /app/seed/dashboards.zip ]; then
            echo "Importing sample dashboards..."
            superset import-dashboards -p /app/seed/dashboards.zip || true
          fi
        else
          echo "Existing SQLite metadata found. Skipping seeding."
        fi

        echo "Starting Superset..."
        exec superset run -p 8088 --host 0.0.0.0
    restart: unless-stopped
    networks:
      - weather-lake-network

  spark-master:
    <<: *spark-common
    command: >
      /opt/spark/bin/spark-class
      org.apache.spark.deploy.master.Master
      --host spark-master
      --port 7077
      --webui-port 8080
    environment:
      SPARK_NO_DAEMONIZE: true
    ports:
      - "7077:7077"
      - "8082:8080"
    restart: always
    networks:
      - weather-lake-network
  
  spark-worker:
    <<: *spark-common
    depends_on:
      - spark-master
    command: >
      /opt/spark/bin/spark-class
      org.apache.spark.deploy.worker.Worker
      --webui-port 8081
      spark://spark-master:7077
    environment:
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 2g
    networks:
      - weather-lake-network

  spark-submit:
    <<: *spark-common
    environment:
      PYSPARK_PYTHON: /usr/bin/python3
    depends_on:
      - spark-master
    user: root
    entrypoint: /bin/bash
    command: >
      -c "/usr/sbin/sshd -D &&
          exec su spark -c 'sleep infinity'"
    ports:
      - "4040:4040"
    networks:
      - weather-lake-network

  spark-thrift:
    <<: *spark-common
    environment:
      SPARK_NO_DAEMONIZE: true
    depends_on:
      - spark-master
      - hive-metastore
    user: root
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "==> Waiting for Hive Metastore..."
        until nc -z hive-metastore 9083; do
          sleep 3
          echo "Waiting for hive-metastore:9083..."
        done

        echo "==> Metastore is up, starting Spark ThriftServer"
        /opt/spark/sbin/start-thriftserver.sh \
          --master spark://spark-master:7077 \
          --executor-cores 1 \
          --total-executor-cores 1 \
          --executor-memory 1G \
          --conf spark.dynamicAllocation.enabled=false \
          --conf spark.executor.instances=1
    ports:
      - "10001:10000"
    networks:
      - weather-lake-network

  spark-init:
    <<: *spark-common
    depends_on:
      - hive-metastore
      - minio
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        until nc -z hive-metastore 9083; do
          sleep 3
        done

        /opt/spark/bin/spark-sql -e "set spark.sql.catalogImplementation;"

        /opt/spark/bin/spark-sql \
          --master spark://spark-master:7077 \
          -e "
            CREATE EXTERNAL TABLE IF NOT EXISTS weather_forecast (
              raw_object_key STRING,
              capture_datetime_utc TIMESTAMP,
              valid_datetime_utc TIMESTAMP,
              valid_hour INT,
              temperature_2m_celsius DOUBLE
            )
            PARTITIONED BY (location_name STRING, valid_year INT, valid_month INT, valid_day INT)
            STORED AS PARQUET
            LOCATION 's3a://weather-lake/forecast_curated/';
          "
    networks:
      - weather-lake-network

  hive-metastore:
    build: ${HIVE_PROJ_DIR}
    ports:
      - "9083:9083"
    environment:
      - SERVICE_NAME=metastore
      - DB_DRIVER=postgres
    depends_on:
      - postgres
      - minio
    restart: always
    volumes:
      - ${HIVE_PROJ_DIR}/config/hive-site.xml:/opt/hive/conf/hive-site.xml
      - ${HIVE_PROJ_DIR}/driver/postgresql-42.7.8.jar:/opt/hive/lib/postgres.jar
      - ${HIVE_PROJ_DIR}/entrypoint.sh:/entrypoint.sh
    networks:
      - weather-lake-network

  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z-cpuv1
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    command:
      - server
      - /data
      - --console-address
      - ":9001"
    restart: always
    volumes:
      - minio-volume:/data
    networks:
      - weather-lake-network

  minio-init:
    image: minio/mc:RELEASE.2025-08-13T08-35-41Z-cpuv1
    depends_on:
      - minio
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e

        echo "==> Waiting for MinIO..."
        sleep 5

        echo "==> Creating buckets"
        mc alias set myminio http://minio:9000 minioadmin minioadmin
        mc mb -p myminio/weather-lake || true

        echo "==> MinIO initialization complete."
    networks:
      - weather-lake-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ${POSTGRES_PROJ_DIR}/init/db-init.sql:/docker-entrypoint-initdb.d/db-init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - weather-lake-network

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - weather-lake-network

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - weather-lake-network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - weather-lake-network

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - weather-lake-network

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - weather-lake-network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files i    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}n shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      - weather-lake-network

volumes:
  postgres-db-volume:
  minio-volume:
  spark-artifacts:

networks:
  weather-lake-network:
    name: weather-lake-network